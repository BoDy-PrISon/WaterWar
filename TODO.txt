# === Обзор Проекта "Морской Бой" ===
# Классическая игра "Морской Бой" с текстовым интерфейсом, ИИ и статистикой.
# Текущая версия имеет прочную объектно-ориентированную архитектуру.
#
# --- Структура проекта ---
# - main.py: Точка входа, главное меню.
# - Game_class.py: Основная логика игры (классы Game, Player).
# - ai.py: Логика искусственного интеллекта (разные уровни сложности).
# - board_utils.py: Вспомогательные функции для работы с доской.
# - config.py: Настройки (символы, цвета, конфигурации кораблей).
# - stats_utils.py: Функции для работы со статистикой (JSON).

# =====================================================================
# === План дальнейшей разработки ===
# =====================================================================

# --- Шаг 1: Рефакторинг и базовые механики ---
# [X] Реализовать ИИ со сложным уровнем (тепловая карта).
# [X] Исправить баги в поведении ИИ (повторные выстрелы, лишний ход).
# [X] Добавить систему статистики (победы/поражения, потопленные корабли).
# [X] Провести рефакторинг: перейти на классы Game, Player.
# [X] Добавить авторазмещение кораблей для игрока.

# --- Шаг 2: Новые игровые механики (Текущая задача) ---
# [ ] TODO: Реализовать режим игры "Залп по эскадре".
#     - Идея: У каждого типа корабля есть уникальная способность.
#     - [ ] Подзадача 2.1: Добавить выбор режима игры в меню ("Классика" / "Залп").
#     - [ ] Подзадача 2.2: Создать структуру для представления кораблей как объектов (например, класс Ship), чтобы хранить не только размер, но и тип, статус (живой/потоплен), способность, перезарядку.
#     - [ ] Подзадача 2.3: Реализовать логику способностей:
#         - 5-палубный "Свержтяжелый Линкор": "Нужно придумать механику" ().
#         - 4-палубный "Линкор": "Артиллерийский удар" (атака по площади 3x3).
#         - 3-палубный "Крейсер": "Разведка боем" (сканирование линии на 3-4 клетки).
#         - 2-палубный "Эсминец": "Двойной выстрел" (2 обычных выстрела).
#         - 1-палубный "Катер": "Маневр" (1 выстрел + 50% шанс на второй).
#     - [ ] Подзадача 2.4: Изменить игровой цикл (метод take_turn), чтобы в начале хода игрок выбирал, какой корабль (и его способность) использовать.
#     - [ ] Подзадача 2.5: Адаптировать ИИ для использования новых способностей.

# --- Шаг 3: Графический интерфейс (GUI) ---
# [ ] TODO (Проект): Перенести игру на графический интерфейс с использованием библиотеки Pygame.
#     - Важно: Этот шаг стоит делать после завершения всей игровой логики.
#     - Наша текущая архитектура с классами хорошо для этого подходит